#pragma once

#include <optional>

#include "Maze.hpp"

/** A factory class responsible for all maze building. */
class MazeBuilder
{
    std::optional<long long int> lastSeed; 

    friend class Maze;

    //Converts the current time to a long long int seed for use in random generation.
    long long int getSeed ();

public:
    MazeBuilder ();

    /** Accessor for the last seed used in maze generation. 
    
    @return an optional containing the last used seed if an algorithm has been run, nullopt o/w 
    */
    std::optional<long long int> getLastSeed();
    
    /** Builds a maze using Wilson's algorithm 

    @p length - the number of rows in the maze generated
    @p width - the number of columns in the maze generated
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    @return - a maze generated by Wilson's algorithm
    */
    Maze genWilsons (int length, int width, long long int seed = -1);

    /** Builds a maze using Wilson's algorithm 
    NOTE: it is ub to pass in a partially generated maze

    @p mz - the empty maze to fill in 
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    NOTE: mz is an out parameter for use in the C interface the python front end uses
    */
    void genWilsons (Maze& mz, long long int seed = -1);

    /** Builds a maze using the Hunt and Kill algorithm 

    @p length - the number of rows in the maze generated
    @p width - the number of columns in the maze generated
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    @return - a maze generated by the Hunt and Kill algorithm
    */
    Maze genHuntAndKill (int length, int width, long long int seed = -1);

    /** Builds a maze using the Hunt and Kill algorithm 
    NOTE: it is ub to pass in a partially generated maze

    @p mz - the empty maze to fill in 
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    NOTE: mz is an out parameter for use in the C interface the python front end uses
    */
    void genHuntAndKill (Maze& mz, long long int seed = -1);

    /** Builds a maze using Cellular Automata

    @p length - the number of rows in the maze generated
    @p width - the number of columns in the maze generated
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    @return - a maze generated by Cellular Automata
    */
    Maze genCellularAutomata (int length, int width, long long int seed = -1);

    /** Builds a maze using Cellular Automata 
    NOTE: it is ub to pass in a partially generated maze

    @p mz - the empty maze to fill in 
    @p seed - the seed for random number generation. 
        If left default, one is generated.
    
    NOTE: mz is an out parameter for use in the C interface the python front end uses
    */
    void genCellularAutomata (Maze& mz, long long int seed = -1);

};