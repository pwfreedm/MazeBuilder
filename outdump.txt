      In file included from /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/attr.h:14,
                       from /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/detail/class.h:12,
                       from /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:12,
                       from /git/Thesis/src/lib/Maze_Bindings.cpp:2:
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h: In instantiation of ‘Return pybind11::detail::argument_loader<Args>::call_impl(Func&&, std::index_sequence<Is ...>, Guard&&) && [with Return = void; Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>&; long unsigned int ...Is = {0, 1, 2}; Guard = pybind11::detail::void_type; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; std::index_sequence<Is ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’:
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1605:65:   required from ‘std::enable_if_t<((bool)std::is_void<_Yp>::value), pybind11::detail::void_type> pybind11::detail::argument_loader<Args>::call(Func&&) && [with Return = void; Guard = pybind11::detail::void_type; Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>&; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; std::enable_if_t<((bool)std::is_void<_Yp>::value), pybind11::detail::void_type> = pybind11::detail::void_type]’
       1605 |         std::move(*this).template call_impl<remove_cv_t<Return>>(
            |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
       1606 |             std::forward<Func>(f), indices{}, Guard{});
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:275:78:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Return = void; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
        275 |                 (void) std::move(args_converter).template call<Return, Guard>(cap->f);
            |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:127:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
        127 |         initialize(
            |         ~~~~~~~~~~^
        128 |             std::forward<Func>(f), (detail::function_signature_t<Func> *) nullptr, extra...);
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:1621:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = Wilsons<>; options = {}]’
       1621 |         cpp_function cf(method_adaptor<type>(std::forward<Func>(f)),
            |                      ^~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/detail/init.h:205:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<Wilsons<> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}]’
        205 |         cl.def(
            |         ~~~~~~^
        206 |             "__init__",
            |             ~~~~~~~~~~~
        207 |             [](value_and_holder &v_h, Args... args) {
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        208 |                 v_h.value_ptr() = construct_or_initialize<Cpp<Class>>(std::forward<Args>(args)...);
            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        209 |             },
            |             ~~
        210 |             is_new_style_constructor(),
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        211 |             extra...);
            |             ~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:1659:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; Extra = {}; type_ = Wilsons<>; options = {}]’
       1659 |         init.execute(*this, extra...);
            |         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
      /git/Thesis/src/lib/Maze_Bindings.cpp:53:13:   required from here
         52 |     py::class_<Wilsons<>>(M, "Wilsons")
            |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         53 |         .def(py::init<Maze<>, int>())
            |         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1631:37: error: use of deleted function ‘Maze<>::Maze(const Maze<>&)’
       1631 |         return std::forward<Func>(f)(cast_op<Args>(std::move(std::get<Is>(argcasters)))...);
            |                ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In file included from /git/Thesis/src/lib/Maze_Bindings.cpp:7:
      /git/Thesis/src/lib/../include/Maze.hpp:24:7: note: ‘Maze<>::Maze(const Maze<>&)’ is implicitly deleted because the default definition would be ill-formed:
         24 | class Maze
            |       ^~~~
      /git/Thesis/src/lib/../include/Maze.hpp:24:7: error: use of deleted function ‘std::unique_ptr<_Tp [], _Dp>::unique_ptr(const std::unique_ptr<_Tp [], _Dp>&) [with _Tp = Cell; _Dp = std::default_delete<Cell []>]’
      In file included from /usr/include/c++/14.2.1/memory:78,
                       from /git/Thesis/src/lib/Maze_Bindings.cpp:1:
      /usr/include/c++/14.2.1/bits/unique_ptr.h:798:7: note: declared here
        798 |       unique_ptr(const unique_ptr&) = delete;
            |       ^~~~~~~~~~
      /git/Thesis/src/lib/../include/Maze.hpp:24:7: note: use ‘-fdiagnostics-all-candidates’ to display considered candidates
         24 | class Maze
            |       ^~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1631:37: note: use ‘-fdiagnostics-all-candidates’ to display considered candidates
       1631 |         return std::forward<Func>(f)(cast_op<Args>(std::move(std::get<Is>(argcasters)))...);
            |                ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      In file included from /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:14:
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/detail/init.h:207:13: note:   initializing argument 2 of ‘pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<Wilsons<> > >(pybind11::class_<Wilsons<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>’
        207 |             [](value_and_holder &v_h, Args... args) {
            |             ^
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h: In instantiation of ‘Return pybind11::detail::argument_loader<Args>::call_impl(Func&&, std::index_sequence<Is ...>, Guard&&) && [with Return = void; Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>&; long unsigned int ...Is = {0, 1, 2}; Guard = pybind11::detail::void_type; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; std::index_sequence<Is ...> = std::integer_sequence<long unsigned int, 0, 1, 2>]’:
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1605:65:   required from ‘std::enable_if_t<((bool)std::is_void<_Yp>::value), pybind11::detail::void_type> pybind11::detail::argument_loader<Args>::call(Func&&) && [with Return = void; Guard = pybind11::detail::void_type; Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>&; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; std::enable_if_t<((bool)std::is_void<_Yp>::value), pybind11::detail::void_type> = pybind11::detail::void_type]’
       1605 |         std::move(*this).template call_impl<remove_cv_t<Return>>(
            |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^
       1606 |             std::forward<Func>(f), indices{}, Guard{});
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:275:78:   required from ‘void pybind11::cpp_function::initialize(Func&&, Return (*)(Args ...), const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Return = void; Args = {pybind11::detail::value_and_holder&, Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}]’
        275 |                 (void) std::move(args_converter).template call<Return, Guard>(cap->f);
            |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:127:19:   required from ‘pybind11::cpp_function::cpp_function(Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Extra = {pybind11::name, pybind11::is_method, pybind11::sibling, pybind11::detail::is_new_style_constructor}; <template-parameter-1-3> = void]’
        127 |         initialize(
            |         ~~~~~~~~~~^
        128 |             std::forward<Func>(f), (detail::function_signature_t<Func> *) nullptr, extra...);
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:1621:22:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const char*, Func&&, const Extra& ...) [with Func = pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>; Extra = {pybind11::detail::is_new_style_constructor}; type_ = HK<>; options = {}]’
       1621 |         cpp_function cf(method_adaptor<type>(std::forward<Func>(f)),
            |                      ^~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/detail/init.h:205:15:   required from ‘static void pybind11::detail::initimpl::constructor<Args>::execute(Class&, const Extra& ...) [with Class = pybind11::class_<HK<> >; Extra = {}; typename std::enable_if<(! Class::has_alias), int>::type <anonymous> = 0; Args = {Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}]’
        205 |         cl.def(
            |         ~~~~~~^
        206 |             "__init__",
            |             ~~~~~~~~~~~
        207 |             [](value_and_holder &v_h, Args... args) {
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        208 |                 v_h.value_ptr() = construct_or_initialize<Cpp<Class>>(std::forward<Args>(args)...);
            |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        209 |             },
            |             ~~
        210 |             is_new_style_constructor(),
            |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        211 |             extra...);
            |             ~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/pybind11.h:1659:21:   required from ‘pybind11::class_<type_, options>& pybind11::class_<type_, options>::def(const pybind11::detail::initimpl::constructor<Args ...>&, const Extra& ...) [with Args = {Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int}; Extra = {}; type_ = HK<>; options = {}]’
       1659 |         init.execute(*this, extra...);
            |         ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~
      /git/Thesis/src/lib/Maze_Bindings.cpp:57:13:   required from here
         56 |     py::class_<HK<>>(M, "HK")
            |     ~~~~~~~~~~~~~~~~~~~~~~~~~
         57 |         .def(py::init<Maze<>, int>())
            |         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1631:37: error: use of deleted function ‘Maze<>::Maze(const Maze<>&)’
       1631 |         return std::forward<Func>(f)(cast_op<Args>(std::move(std::get<Is>(argcasters)))...);
            |                ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/cast.h:1631:37: note: use ‘-fdiagnostics-all-candidates’ to display considered candidates
      /tmp/pip-build-env-at9qlvaa/overlay/lib/python3.12/site-packages/pybind11/include/pybind11/detail/init.h:207:13: note:   initializing argument 2 of ‘pybind11::detail::initimpl::constructor<Maze<std::unique_ptr<Cell [], std::default_delete<Cell []> > >, int>::execute<pybind11::class_<HK<> > >(pybind11::class_<HK<> >&)::<lambda(pybind11::detail::value_and_holder&, Maze<>, int)>’
        207 |             [](value_and_holder &v_h, Args... args) {
            |             ^
