
#include <chrono>
#include <optional>

#include "Maze.hpp"
#include "algorithms/Wilsons.cpp"
#include "algorithms/HK.cpp"

/** A factory class responsible for all maze building. */
class MazeBuilder
{
    std::optional<long long int> lastSeed;

    friend class Maze;

    /** Converts the current time to a long long int seed for use in random generation.*/
    long long int
    getSeed()
    {
        auto now = std::chrono::system_clock::now();
        auto duration = now.time_since_epoch();
        return std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();
    }


    public: 

    MazeBuilder ()
    : lastSeed() {}

    /** Accessor for the last seed used in maze generation. 
        
        @return an optional containing the last used seed if an algorithm has been run, nullopt o/w 
    */
    std::optional<long long int>
    getLastSeed ()
    {
        return lastSeed;
    }
    /** Builds a maze using Wilson's algorithm 
    
        @p length - the number of rows in the maze generated
        @p width - the number of columns in the maze generated
        @p seed - the seed for random number generation. 
            If left default, one is generated.
        
        @return - a maze generated by Wilson's algorithm
    */
    Maze
    genWilsons (int length, int width, long long int seed = -1)
    {
        lastSeed = seed == -1 ? getSeed() : seed;
        Maze mz(length, width);
        Wilsons wil(mz, lastSeed.value());
        wil.run();
        return mz;
    }

    Maze
    genHuntAndKill (int length, int width, long long int seed = -1)
    {
        lastSeed = seed == -1 ? getSeed() : seed;
        Maze mz(length, width);
        HK hunt(mz, lastSeed.value());
        hunt.run();
        return mz;
    }

    Maze 
    genCellularAutomata (int length, int width, long long int seed = -1)
    {
        lastSeed = seed == -1 ? getSeed() : seed;
        Maze mz(length, width);
        //TODO: replace this with a call to cellular automata
        HK hunt (mz, lastSeed.value());
        hunt.run();
        return mz;
    }

};